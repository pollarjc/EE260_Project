/* EE260_Project5_1.c UART on USART2 Receive at 9600 Baud
 *
 * Receive key strokes from terminal emulator (TeraTerm, hterm, or putty) of the
 * host PC to the USART2 of the Nucleo-F446RE board. 
 * USART2 is connected to the ST-Link virtual COM port.
 * Launch terminal emulator on a PC and hit any key.
 * By default, the clock is running at 16 MHz.
 * The UART2 is configured for 9600 Baud.
 * PA3 - USART2 RX (AF7)
 *
 * This program was tested with Keil uVision v5.24a with DFP v2.11.0
 */
#include "stm32F4xx.h"

void delay(void);
//void delayMs(int n);
void init_project(void);
char keypad_getkey(void);
char hexKeys[] = {0x0,'D','E','0','F','C','9','8','7','B','6','5','4','A','3','2','1'};
//char keypressed;

void USART2_init(void);
char USART2_read(void);
void USART2_write(int);
void delayMs(int);

/*----------------------------------------------------------------------------
  MAIN function
 *----------------------------------------------------------------------------*/
int main (void) {

	int a;
	int b = 0;
	//char c;
	char c[4];
	
			int LCDdef[16];
	
		LCDdef[0] = 0x003F;
		LCDdef[1] = 0x0030;
		LCDdef[2] = 0x005B;
		LCDdef[3] = 0x004F;
		LCDdef[4] = 0x0063;
		LCDdef[5] = 0x006D;
		LCDdef[6] = 0x007D;
		LCDdef[7] = 0x0007;
		LCDdef[8] = 0x007F;
		LCDdef[9] = 0x006F;
		LCDdef[10] = 0x0077;  //A
		LCDdef[11] = 0x007C;	//B
		LCDdef[12] = 0x0039;	//C
		LCDdef[13] = 0x005E;	//D
		LCDdef[14] = 0x0079;	//E
		LCDdef[15] = 0x0071;	//F
		
		int A=10;
		int B=11;
		int C=12;
		int D=13;
		int E=14;
		int F=15;
	
	  unsigned char key;

    init_project();			    /* initialize GPIOB and C */

    USART2_init();                  /* initialize USART2 */


/* Concept loop for how to get array to be set for future use in LCD, 7 segment and Putty
 * Theoretically should have all aspects needed, needs testing. 
 * Program should, create and store an array of 4 values based on user keypad input
 */

	while(1) {                      /* Loop forever */
			
		key = keypad_getkey();  /* read the keypad */
        	if (key != 0)
		{
			if(b == 0)	//If first value
			{
				c[a] = hexKeys[key];
				delayMs(1);
				b = 1;
			}
			else	//Not first value
			{
				for(a = 0; a < 4; a++)	//Shift all to right
					{
					c[a] = c[a+1];			
					}
				c[0] = hexKeys[key];	//Instantiate new first value
				delayMs(1);		
			}
		}
		
		    GPIOB->ODR = LCDdef[c[0]];            /* display tens digit */
        GPIOB->BSRR = 0x000D0000;       /* deselect ones hundreds and thousands digits */
        GPIOB->BSRR = 0x00000002;       /* select tens digit */
        delayMs(8);
        GPIOB->ODR = LCDdef[c[1]];            /* display ones digit */
        GPIOB->BSRR = 0x000F0000;       /* deselect tens hundreds and thousands digits */
        GPIOB->BSRR = 0x00000001;       /* select ones digit */
			  delayMs(8);
			  GPIOB->ODR = LCDdef[c[2]];            /* display hundreds digit */
        GPIOB->BSRR = 0x000B0000;       /* deselect ones tens and thousands digits */
        GPIOB->BSRR = 0x00000004;       /* select hundreds digit */
			  delayMs(8);
			  GPIOB->ODR = LCDdef[c[3]];            /* display thousands digit */
        GPIOB->BSRR = 0x00070000;       /* deselect ones tens and hundreds digits */
        GPIOB->BSRR = 0x00000008;       /* select thousands digit */
			  delayMs(8);
		
		USART2_write(c[0]);	//Write to USART2
		delayMs(350);	//Give time to process
    	}
}


//    while(1) {                      /* Loop forever */
//			
//		key = keypad_getkey();  /* read the keypad */
 //       	if (key != 0)
//		{
//			c = hexKeys[key];
//			delayMs(1);					
//			USART2_write(c);
//		}
//		delayMs(350);
 //   	}
//}

/*----------------------------------------------------------------------------
  Initialize UART pins, Baudrate
 *----------------------------------------------------------------------------*/
void USART2_init (void) {
    RCC->AHB1ENR |= 1;          /* Enable GPIOA clock */
    RCC->APB1ENR |= 0x20000;    /* Enable USART2 clock */

    /* Configure PA3 for USART2 RX */
    GPIOA->AFR[0] &= ~0xF000;
    GPIOA->AFR[0] |=  0x7000;   /* alt7 for USART2 */
    GPIOA->MODER  &= ~0x00C0;
    GPIOA->MODER  |=  0x0080;   /* enable alternate function for PA3 */
	
	  /* Configure PA2 for USART2_TX */
    GPIOA->AFR[0] &= ~0x0F00;
    GPIOA->AFR[0] |=  0x0700;   /* alt7 for USART2 */
    GPIOA->MODER  &= ~0x0030;
    GPIOA->MODER  |=  0x0020;   /* enable alternate function for PA2 */

	  /* configure UART2, Rx and TX */
	  USART2->BRR = 0x008B;       /* 115200 baud @ 16 MHz */
    USART2->CR1 = 0x0004;       /* enable Rx, 8-bit data */
    USART2->CR1 |= 0x0008;      /* enable Tx, 8-bit data */	
    USART2->CR2 = 0x0000;       /* 1 stop bit */
    USART2->CR3 = 0x0000;       /* no flow control */
    USART2->CR1 |= 0x2000;      /* enable USART2 */
			
}

/* Read a character from USART2 */
char USART2_read(void) {
    while (!(USART2->SR & 0x0020)) {}   // wait until char arrives
    return USART2->DR;
}

/* Write a character to USART2 */
void USART2_write (int ch) {
    while (!(USART2->SR & 0x0080)) {}   // wait until Tx buffer empty
    USART2->DR = (ch & 0xFF);
}

void delayMs(int n) {
    int i;
    for (; n > 0; n--)
        for (i = 0; i < 3195; i++) ;
} 

/* this function initializes PC0-3 (column) and PC4-7 (row).
 * The column pins need to have the pull-up resistors enabled.
 */
void init_project(void) {
    RCC->AHB1ENR |=  0x06;	        /* enable GPIOB-C clock */
	//GPIOB->MODER &= ~0x3FFFCCFF;
	//GPIOB->MODER |=  0x15554455;
	//GPIOB->BSRR = 0x00800000;       /* turn off EN */
	
    GPIOB->MODER &= ~0xFF3F33FF;    /* clear pin mode */
    GPIOB->MODER |=  0x55151155;    /* set pins to output mode */
	
    GPIOC->MODER &= ~0x00FFFFFF;    /* clear pin mode to input */
    GPIOB->MODER |=  0x00550000;    /* set pins to output mode */
	
  	GPIOC->PUPDR =   0x00000055;    /* enable pull up resistors for column pins */
}
/*
 * This is a non-blocking function to read the keypad.
 * If a key is pressed, it returns a unique code for the key.
 * Otherwise, a zero is returned.
 * PC0-3 are used as input and connected to the columns. Pull-up resistors are
 * enabled so when the keys are not pressed, these pins are pulled high.
 * PC4-7 are used as output that drives the keypad rows.
 * First, all rows are driven low and the input pins are read. If no key is
 * pressed, they will read as all one because of the pull up resistors.
 * If they are not all one, some key is pressed.
 * If some key is pressed, the program proceeds to drive only one row low at
 * a time and leave the rest of the rows inactive (float) then read the input pins.
 * Knowing which row is active and which column is active, the program can decide
 * which key is pressed.
 *
 * Only one row is driven so that if multiple keys are pressed and row pins are
 * shorted, the microcontroller will not be damaged. When the row is being
 * deactivated, it is driven high first otherwise the stray capacitance may keep
 * the inactive row low for some time.
 */
char keypad_getkey(void) {
    int row, col;
    const int row_mode[] = {0x00000100, 0x00000400, 0x00001000, 0x00004000}; /* one row is output */
    const int row_low[] =  {0x00100000, 0x00200000, 0x00400000, 0x00800000}; /* one row is low */
    const int row_high[] = {0x00000010, 0x00000020, 0x00000040, 0x00000080}; /* one row is high */

    /* check to see any key pressed */
    GPIOC->MODER = 0x00005500;      /* make all row pins output */
    GPIOC->BSRR =  0x00F00000;      /* drive all row pins low */
		delayMs(1);		
    //delay();                        /* wait for signals to settle */
    col = GPIOC->IDR & 0x000F;      /* read all column pins */
    GPIOC->MODER &= ~0x0000FF00;    /* disable all row pins drive */
    if (col == 0x000F)              /* if all columns are high */
        return 0;                       /* no key pressed */

    /* If a key is pressed, it gets here to find out which key.
     * It activates one row at a time and read the input to see
     * which column is active. */
    for (row = 0; row < 4; row++) {
        GPIOC->MODER &= ~0x0000FF00;    /* disable all row pins drive */
        GPIOC->MODER |= row_mode[row];  /* enable one row at a time */
        GPIOC->BSRR = row_low[row];     /* drive the active row low */
			  delayMs(1);
        //delay();                        /* wait for signal to settle */
        col = GPIOC->IDR & 0x000F;      /* read all columns */
        GPIOC->BSRR = row_high[row];    /* drive the active row high */
        if (col != 0x000F) break;       /* if one of the input is low, some key is pressed. */
    }
    GPIOC->BSRR = 0x000000F0;           /* drive all rows high before disable them */
    GPIOC->MODER &= ~0x0000FF00;        /* disable all rows */
    if (row == 4)
        return 0;                       /* if we get here, no key is pressed */

    /* gets here when one of the rows has key pressed, check which column it is */
    if (col == 0x000E) return row * 4 + 1;    /* key in column 0 */
    if (col == 0x000D) return row * 4 + 2;    /* key in column 1 */
    if (col == 0x000B) return row * 4 + 3;    /* key in column 2 */
    if (col == 0x0007) return row * 4 + 4;    /* key in column 3 */

    return 0;   /* just to be safe */
}
/* make a small delay */
void delay(void) {
    int i;
    for (i = 0; i < 20; i++) ;
}
